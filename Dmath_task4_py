#Задача 4
from operator import xor
import numpy as np
def bfs(num, G):
  G[num][num] = 2
  while True:
    exp = 0
    i = 0
    while G[i] != None:
      j = i + 1
      while G[j] != None:
        if G[i][j] == 1 and G[i][i] == xor(2, G[j][j]) == 2:
          G[i][i] = 2
          G[j][j] = 2
          exp += 1
        j += 1
      i += 1
    if exp != 0:
      break
  enx = 0
  i = 0
  while G[i] != None: 
    if G[i][i] == 2:
      enx += 1
    i += 1
  return enx

n, m, v = map(int, input().split())
G = np.zeros((n+1, n))
G[n] = None 
for i in range(m):
  x, y = map(int, input().split())
  G[x][y] = 1
  G[y][x] = 1
print(bfs(v, G))


