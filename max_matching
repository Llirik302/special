#include <iostream> 
#include <fstream>
#include <limits.h> 
#include <string.h> 
#include <queue> 

using namespace std;

bool bfs(int** rGraph, int s, int t, int* parent, const int& N)
{
	bool* visited = new bool[N];
	memset(visited, 0, N);

	queue <int> q;
	q.push(s);
	visited[s] = true;
	parent[s] = -1;

	while (!q.empty())
	{
		int u = q.front();
		q.pop();

		for (int v = 0; v < N; v++)
		{
			if (visited[v] == false && rGraph[u][v] > 0)
			{
				q.push(v);
				parent[v] = u;
				visited[v] = true;
			}
		}
	}

	return (visited[t] == true);
	delete[] visited;
}

int FordIsGood(int** Matrix, int s, int t)
{
	int u, v;
	int N = t + 1;

	int** rGraph = new int* [N];
	for (int i = 0; i < N; ++i)
		rGraph[i] = new int[N];

	for (u = 0; u < N; u++)
		for (v = 0; v < N; v++)
			rGraph[u][v] = Matrix[u][v];

	int* parent = new int[N];

	int max_flow = 1;
	while (bfs(rGraph, s, t, parent, N))
	{
		int path_flow = INT_MAX;
		for (v = t; v != s; v = parent[v])
		{
			u = parent[v];
			path_flow = min(path_flow, rGraph[u][v]);
		}

		for (v = t; v != s; v = parent[v])
		{
			u = parent[v];
			rGraph[u][v] -= path_flow;
			rGraph[v][u] += path_flow;
		}

		max_flow += path_flow;
	}
	delete[] parent;

	return max_flow;
}

int main()
{
	ifstream f;
	f.open("test2.txt", ios::in);
	int N = 0, M = 0;
	f >> N >> M;
	int* len = new int[N];
	int** str = new int*[N];
	cout << "N: " << N << " M: " << M << endl;
	for (int i = 0; i < N; ++i) {
		f >> len[i];
		if (len[i] == 0) {
			len[i] = 1;
			str[i] = new int[1];
			str[i][0] = 0;
		}
		else {
			str[i] = new int[len[i]];
			for (int j = 0; j < len[i]; ++j) {
				f >> str[i][j];
			}
		}
	}

	int D = N + M + 2;
	cout << "D: " << D << endl;

	int** matrix = new int* [D];
	for (int i = 0; i < D; ++i)
		matrix[i] = new int[D];

	for (int i = 0; i < D; ++i)
		for (int j = 0; j < D; ++j)
			matrix[i][j] = 0;
	
	for (int i = 1; i <= N; ++i)
		matrix[0][i] = 1;
	//
	for (int i = 1; i <= N ; ++i)
		for(int tmp = 0; tmp < len[i - 1]; ++tmp)
			matrix[i][(str[i - 1][tmp]) + N] = 1;

	for (int i = N + 1; i < D - 1; ++i)
		matrix[i][D - 1] = 1;
	f.close();

	/*ifstream f;
	f.open("test_for.txt", ios::in);
	int N;

	f >> N;
	cout << "N: " << N << endl;

	int **matrix = new int*[N];
	for (int i = 0; i < N; ++i) {
		matrix[i] = new int[N];
	}

	for (int i = 0; i < N; ++i)
		for (int j = 0; j < N; ++j)
			f >> matrix[i][j];

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
			cout << matrix[i][j] << " ";
		cout << endl;
	}
	f.close();*/

	int s = 0, t = D - 1;
	cout << FordIsGood(matrix, s, t) << endl;
	for (int i = 0; i < D; ++i)
		delete[] matrix[i];
	delete[] matrix;
	for (int i = 0; i < N; ++i)
		delete[] str[i];
	delete[] str;
	delete[] len;
	return 0;
}
